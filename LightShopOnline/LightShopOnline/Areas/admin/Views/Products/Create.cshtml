@model LightShopOnline.Areas.admin.Models.Product

@{
    ViewData["Title"] = "Create";
    ViewBag.Title = "Product";
    ViewBag.CurrentTitle = "Create Product";
}

@section _Headers {
    <!-- file drop -->
    <link rel="stylesheet" href="~/css/drop_upload.css">
    <!-- summernote -->
    <link rel="stylesheet" href="~/adminlte/plugins/summernote/summernote-bs4.min.css">
}


<h2>Create</h2>
<p>
    <a class="btn btn-secondary" href="@Url.Action("Index", "Products", new { area = "admin" })">Return to list Products</a>
</p>
<hr />

@using (Html.BeginForm(new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <!-- general form elements -->
    <div class="card card-success">
        <div class="card-header">
            <h3 class="card-title">@ViewBag.CurrentTitle</h3>
        </div>
        <!-- /.card-header -->
        <div class="card-body">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group row">
                <div class="col-2">
                    <div class="images">
                        <p class="tieude control-label"><b>Product Image</b></p>
                        <div class="divanh">
                            <div class="row">
                                <img src="">
                            </div>

                            <div class="drop-zone">
                                <span class="drop-zone__prompt">Drop file here or click to upload</span>
                                <input type='file' name="anhdd" id='' class='drop-zone__input' accept="image/">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-10">
                    <div class="form-group row">
                        @Html.LabelFor(model => model.Product_Name, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Product_Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Product_Name, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.url, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.url, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.url, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        <div class="col-4 row">
                            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control", @type = "number" } })
                                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-4 row">
                            @Html.LabelFor(model => model.Discount, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control", @type = "number" } })
                                @Html.ValidationMessageFor(model => model.Discount, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-4 row">
                            @Html.LabelFor(model => model.Size, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Size, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Size, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group row">
                        <div class="col-4 row">
                            @Html.LabelFor(model => model.Brand, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Brand, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Brand, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-4 row">
                            @Html.LabelFor(model => model.Warrant, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.Warrant, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Warrant, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-4 row">
                            @Html.LabelFor(model => model.Color, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Color, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Color, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-6 row">
                            <!-- select -->
                            <label class="control-label col-md-3">Category</label>
                            <div class="col-md-9">
                                <select name="category" class="form-control">
                                    @foreach (var cat in ViewBag.CategoryList)
                                    {
                                        <option value="@cat.Category_Id">ID: @cat.Category_Id - @cat.Category_Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>

                </div>
            </div>

            <div class="form-group row">
                <div class="col-12">
                    <!-- Main content -->
                    <section class="content">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="card card-outline card-info">
                                    <div class="card-header">
                                        <h3 class="card-title">
                                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-12" })
                                        </h3>
                                    </div>
                                    <!-- /.card-header -->
                                    <div class="card-body">
                                        @Html.TextAreaFor(model => model.Description, new { rows = 30 })
                                    </div>
                                </div>
                            </div>
                            <!-- /.col-->
                        </div>
                        <!-- ./row -->
                    </section>
                    <!-- /.content -->
                </div>
            </div>


            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-success" />
                </div>
            </div>
        </div>
        <!-- /.card-body -->
    </div>
    <!-- /.card -->
}

@section _Footer {
    <!-- file drop -->
    <script src="~/js/drop_upload.js"></script>
    <!-- Summernote -->
    <script src="~/adminlte/plugins/summernote/summernote-bs4.min.js"></script>
    <!-- Ajax -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>

    <script type="text/javascript">
        

        $(''#Description'').summernote({
            height: 300,                 // set editor height
            minHeight: null,             // set minimum height of editor
            maxHeight: null,             // set maximum height of editor
            focus: true,                  // set focus to editable area after initializing summernote
            callbacks: {
                onImageUpload: function (files) {
                    for (let i = 0; i < files.length; i++) {
                        UploadImage(files[i]);
                    }
                }
            }
        });

        function UploadImage(file) {
            var url = ''@ViewBag.GuestHost/admin/SummerEx/UploadFile'';

            formData = new FormData();
            formData.append("uploadedFiles", file);
            $.ajax({
                type: ''POST'',
                url: url,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                success: function (FileUrl) {
                   // alert(FileUrl);
                    var imgNode = document.createElement(''img'');
                    imgNode.src = FileUrl;
                    $(''#Description'').summernote(''insertNode'', imgNode);
                },
                error: function (data) {
                    alert(data.responseText);
                }
            });
        }
    </script>
}